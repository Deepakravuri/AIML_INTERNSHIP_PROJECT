import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

# Load the data
file_path = 'C:\Users\ravur\Downloads\employee_burnout_analysis-AI.xlsx'
data = pd.read_excel('C:\Users\ravur\Downloads\employee_burnout_analysis-AI.xlsx')

# Drop irrelevant columns and rows with missing values in critical columns
data.drop(columns=['Date of Joining'], inplace=True)
data_cleaned = data.dropna(subset=['Resource Allocation', 'Mental Fatigue Score', 'Burn Rate'])

# Save the cleaned data
data_cleaned.to_csv('cleaned_data.csv', index=False)
print("Cleaned data saved to 'cleaned_data.csv'")

# Exploratory Data Analysis (EDA)
plt.figure(figsize=(10, 8))
sns.heatmap(data_cleaned.corr(), annot=True, cmap='coolwarm')
plt.title('Correlation Matrix')
plt.show()

sns.pairplot(data_cleaned)
plt.show()

# Model Building
features = ['Resource Allocation', 'Mental Fatigue Score', 'Designation']
X = data_cleaned[features]
y = data_cleaned['Burn Rate']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = LinearRegression()
model.fit(X_train, y_train)

y_pred = model.predict(X_test)
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f'Mean Squared Error: {mse}')
print(f'R-squared: {r2}')

# Prediction and Recommendations
data_cleaned['Predicted Burn Rate'] = model.predict(data_cleaned[features])

def categorize_risk(burn_rate):
    if burn_rate < 0.3:
        return 'Low'
    elif burn_rate < 0.6:
        return 'Moderate'
    else:
        return 'High'

data_cleaned['Risk Level'] = data_cleaned['Predicted Burn Rate'].apply(categorize_risk)
data_cleaned.to_csv('burnout_predictions.csv', index=False)
print("Predictions saved to 'burnout_predictions.csv'")

# Summary report
risk_summary = data_cleaned['Risk Level'].value_counts()
print(risk_summary)
